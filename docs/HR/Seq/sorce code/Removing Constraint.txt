title Adding Constraint

actor Employee
participant Facade
participant cService - ShiftService
participant result - Result
participant cController - ShiftController
participant bShift - BusinessShift
participant mapper - ShiftDataMapper

ref over Employee, Facade:Login

Employee->Facade:2 unregisterAsAvailable(eID, date, shiftType)
activate Facade

Facade->cService - ShiftService:2.1 unregisterAsAvailable(eID, date, shiftType)
activate cService - ShiftService
cService - ShiftService->cController - ShiftController: 2.1.1 unregisterAsAvailable(eID, date, shiftType)
activate cController - ShiftController
ref over cController - ShiftController, mapper - ShiftDataMapper:Get Shift

alt Shift exists
ref over cController - ShiftController, mapper - ShiftDataMapper:Update Shift
space -0.5
cService - ShiftService->*result - Result:2.1.2A <<createOK>>
else Shift doesn't exists
cController - ShiftController -->cService - ShiftService:2.1.1.1B errMsg
cService - ShiftService->*result - Result:2.1.2B <<createFailure(errMsg)>>
deactivate cController - ShiftController
end 
cService - ShiftService-->Facade:2.1.3 result
deactivate cService - ShiftService
alt result is Ok
Facade-->Employee:2.2 successMsg
destroy result - Result
else else
Facade-->Employee:2.2 result.error
destroy result - Result
end
space -0.5
deactivate Facade