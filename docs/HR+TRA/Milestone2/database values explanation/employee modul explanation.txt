Values saved in the db:

Employees:
	carriers : id 100 - 109 		   all have licenseTypes of {B,CE}
	cashiers : id 110 - 119 		   all are shift managers
	HR_Manager : id 120 - 129 
	Logistics_Manager : id 130 - 139
	Sorter : id 140 - 149 all 		   all are shift managers
	Storekeeper : id 150 - 159 		   all are shift managers
	Transport_Manager : id 160 - 169   all are shift managers

note : if employee is assigne to a shift he is availiable to it as well

Shifts:
	- all shifts between 1.6.22-30.6.22 has been created (both morning and evening)
	- all shifts after 11.6.22 (includes) has no available and no assigned employees. 
	
	- shifts between dates 1.6.22-10.6.22 has the folowing
		both morning shifts and evening shifts has all the carriers assigned
		both morning shifts and evening shifts has thire manager as cashier (managerId = 110+shift.date.day-1)
		morning shifts has all the hrManagers,logisticManagers,transportManagers assigned in them
		evening shift has all the sorters and storekeeppers

The code to save :
  LocalDate firstOfJun = LocalDate.parse("2022-06-01");
        LocalDate endOfJun = LocalDate.parse("2022-06-30");
        Set<Certifications> notEmptyCertification = new HashSet<>();
        notEmptyCertification.add(Certifications.ShiftManagement);
        Set<Certifications> emptyCertification = new HashSet<>();
        Set<LicenseTypes> licenseTypes = new HashSet<>();
        licenseTypes.add(LicenseTypes.B);
        licenseTypes.add(LicenseTypes.CE);

        long numOfDays = ChronoUnit.DAYS.between(firstOfJun, endOfJun.plusDays(1));
        java.util.List<LocalDate> listOfDates = Stream.iterate(firstOfJun, date -> date.plusDays(1))
                .limit(numOfDays)
                .collect(Collectors.toList());

        for (LocalDate date : listOfDates){
            try {
                shiftDataMapper.delete(date,ShiftTypes.Morning);
                shiftDataMapper.delete(date,ShiftTypes.Evening);
                shiftDataMapper.save(new MorningShift(date,10,10,10,10,10,10,10));
                shiftDataMapper.save(new EveningShift(date,10,10,10,10,0,0,0));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

       Set<String> carriers = new HashSet<>();
               Set<String> cashiers = new HashSet<>();
       Set<String> hrManagers = new HashSet<>();
               Set<String> logisticManagers = new HashSet<>();
       Set<String> sorters = new HashSet<>();
               Set<String> storekeepers = new HashSet<>();
       Set<String> transportManagers = new HashSet<>();

        LocalDate movingDate = firstOfJun;
        for (int i =0; i<10; i++){
            employeeDataMapper.delete(Integer.toString(i+100));
            employeeDataMapper.delete(Integer.toString(i+100+10));
            employeeDataMapper.delete(Integer.toString(i+100+20));
            employeeDataMapper.delete(Integer.toString(i+100+30));
            employeeDataMapper.delete(Integer.toString(i+100+40));
            employeeDataMapper.delete(Integer.toString(i+100+50));
            employeeDataMapper.delete(Integer.toString(i+100+60));
            employeeDataMapper.save(new Carrier(Integer.toString(i+100),"carrier " + (i+1),"bank",i+10,date,emptyCertification,licenseTypes));
            carriers.add(Integer.toString(i+100));
            employeeDataMapper.save(new Cashier(Integer.toString(i+100+10),"cashier " + (i+1),"bank",i+10,date,notEmptyCertification));
            cashiers.add(Integer.toString(i+100+10));
            employeeDataMapper.save(new HR_Manager(Integer.toString(i+100+20),"hr manager " + (i+1),"bank",i+10,date,emptyCertification));
            hrManagers.add(Integer.toString(i+100+20));
            employeeDataMapper.save(new Logistics_Manager(Integer.toString(i+100+30),"logistic manager " + (i+1),"bank",i+10,date,emptyCertification));
            logisticManagers.add(Integer.toString(i+100+30));
            employeeDataMapper.save(new Sorter(Integer.toString(i+100+40),"sorter " + (i+1),"bank",i+10,date,notEmptyCertification));
            sorters.add(Integer.toString(i+100+40));
            employeeDataMapper.save(new Storekeeper(Integer.toString(i+100+50),"storekeeper " + (i+1),"bank",i+10,date,notEmptyCertification));
            storekeepers.add(Integer.toString(i+100+50));
            employeeDataMapper.save(new Transport_Manager(Integer.toString(i+100+60),"transport manager " + (i+1),"bank",i+10,date,notEmptyCertification));
            transportManagers.add(Integer.toString(i+100+60));
        }
        for (int i =0; i<10; i++, movingDate = movingDate.plusDays(1)) {
            Shift morningShift =shiftDataMapper.get(movingDate,ShiftTypes.Morning);
            Shift eveningShift =shiftDataMapper.get(movingDate,ShiftTypes.Evening);
            morningShift.registerAsAvailable(Integer.toString(i+100));
            eveningShift.registerAsAvailable(Integer.toString(i+100));
            morningShift.registerAsAvailable(Integer.toString(i+110));
            eveningShift.registerAsAvailable(Integer.toString(i+110));
            morningShift.setCarrierIDs(carriers);
            eveningShift.setCarrierIDs(carriers);
            morningShift.setShiftManagerId(Integer.toString(i+110));
            eveningShift.setShiftManagerId(Integer.toString(i+110));

            morningShift.registerAsAvailable(Integer.toString(i+120));
            morningShift.setHr_managerIDs(hrManagers);
            morningShift.registerAsAvailable(Integer.toString(i+130));
            morningShift.setLogistics_managerIDs(logisticManagers);

            eveningShift.registerAsAvailable(Integer.toString(i+140));
            eveningShift.setSorterIDs(sorters);
            eveningShift.registerAsAvailable(Integer.toString(i+150));
            eveningShift.setStorekeeperIDs(storekeepers);

            morningShift.registerAsAvailable(Integer.toString(i+160));
            morningShift.setTransport_managerIDs(transportManagers);

            shiftDataMapper.save(morningShift);
            shiftDataMapper.save(eveningShift);
        }